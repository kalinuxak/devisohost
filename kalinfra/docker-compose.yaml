version: '3.9'

services:
  flaskapp:
    build:
      context: .
      dockerfile: flaskapp/Dockerfile
    container_name: flaskapp
    ports:
      - "8000:8000"
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
    restart: unless-stopped
    networks:
      - backend

  apache:
    build:
      context: ./kalinuxsec/configs/apache2
      dockerfile: Dockerfile
    container_name: apache
    ports:
      - "${APACHE_PORT:-8080}:80"
    restart: unless-stopped
    networks:
      - backend

  nginx:
    build:
      context: ./kalinuxsec/configs/nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - apache
    restart: unless-stopped
    networks:
      - backend

  telegrambot:
    build:
      context: ./telegrambot
      dockerfile: Dockerfile
    container_name: telegrambot
    environment:
      - TELEGRAM_API_TOKEN=${TELEGRAM_API_TOKEN}
    restart: unless-stopped
    networks:
      - backend

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - backend

  memcached:
    image: memcached:alpine
    container_name: memcached
    ports:
      - "11211:11211"
    restart: unless-stopped
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - backend

networks:
  backend:
    driver: bridge
